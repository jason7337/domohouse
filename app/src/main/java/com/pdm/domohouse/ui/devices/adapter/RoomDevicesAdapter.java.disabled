package com.pdm.domohouse.ui.devices.adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.ListAdapter;
import androidx.recyclerview.widget.RecyclerView;

import com.pdm.domohouse.R;
import com.pdm.domohouse.data.model.Device;
import com.pdm.domohouse.ui.devices.DevicesViewModel;

/**
 * Adaptador para mostrar dispositivos agrupados por habitación
 * Utiliza un RecyclerView anidado para mostrar los dispositivos de cada habitación
 */
public class RoomDevicesAdapter extends ListAdapter<DevicesViewModel.RoomWithDevices, RoomDevicesAdapter.RoomViewHolder> {
    
    // Interfaces para callbacks
    public interface OnDeviceClickListener {
        void onDeviceClick(Device device);
    }
    
    public interface OnDeviceToggleListener {
        void onDeviceToggle(Device device, boolean newState);
    }
    
    public interface OnDeviceLongClickListener {
        void onDeviceLongClick(Device device);
    }
    
    private final OnDeviceClickListener clickListener;
    private final OnDeviceToggleListener toggleListener;
    private final OnDeviceLongClickListener longClickListener;

    /**
     * Constructor del adaptador
     */
    public RoomDevicesAdapter(OnDeviceClickListener clickListener,
                             OnDeviceToggleListener toggleListener,
                             OnDeviceLongClickListener longClickListener) {
        super(DIFF_CALLBACK);
        this.clickListener = clickListener;
        this.toggleListener = toggleListener;
        this.longClickListener = longClickListener;
    }

    @NonNull
    @Override
    public RoomViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_room_devices, parent, false);
        return new RoomViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull RoomViewHolder holder, int position) {
        DevicesViewModel.RoomWithDevices roomWithDevices = getItem(position);
        holder.bind(roomWithDevices);
    }

    /**
     * ViewHolder para cada habitación con sus dispositivos
     */
    public class RoomViewHolder extends RecyclerView.ViewHolder {
        
        private final TextView roomNameText;
        private final TextView roomDeviceCountText;
        private final RecyclerView devicesRecyclerView;
        private DeviceAdapter deviceAdapter;

        public RoomViewHolder(@NonNull View itemView) {
            super(itemView);
            
            roomNameText = itemView.findViewById(R.id.text_room_name);
            roomDeviceCountText = itemView.findViewById(R.id.text_device_count);
            devicesRecyclerView = itemView.findViewById(R.id.recycler_devices);
            
            // Configurar RecyclerView anidado para dispositivos
            setupDevicesRecyclerView();
        }

        /**
         * Configura el RecyclerView anidado para los dispositivos
         */
        private void setupDevicesRecyclerView() {
            deviceAdapter = new DeviceAdapter(clickListener, toggleListener, longClickListener);
            
            devicesRecyclerView.setAdapter(deviceAdapter);
            devicesRecyclerView.setLayoutManager(
                new LinearLayoutManager(itemView.getContext(), LinearLayoutManager.HORIZONTAL, false)
            );
            
            // Evitar scroll conflicts con el RecyclerView padre
            devicesRecyclerView.setNestedScrollingEnabled(false);
        }

        /**
         * Vincula los datos de la habitación con las vistas
         */
        public void bind(DevicesViewModel.RoomWithDevices roomWithDevices) {
            // Configurar información de la habitación
            roomNameText.setText(roomWithDevices.getRoom().getName());
            
            int deviceCount = roomWithDevices.getDevices().size();
            String deviceCountText = itemView.getContext().getResources()
                    .getQuantityString(R.plurals.device_count, deviceCount, deviceCount);
            roomDeviceCountText.setText(deviceCountText);
            
            // Configurar icono según el tipo de habitación
            int roomIcon = getRoomIcon(roomWithDevices.getRoom().getType().name());
            roomNameText.setCompoundDrawablesWithIntrinsicBounds(roomIcon, 0, 0, 0);
            
            // Actualizar lista de dispositivos
            deviceAdapter.submitList(roomWithDevices.getDevices());
            
            // Configurar click en la habitación para expandir/contraer
            itemView.setOnClickListener(v -> toggleDevicesVisibility());
        }

        /**
         * Alterna la visibilidad de los dispositivos de la habitación
         */
        private void toggleDevicesVisibility() {
            if (devicesRecyclerView.getVisibility() == View.VISIBLE) {
                devicesRecyclerView.setVisibility(View.GONE);
                // Cambiar icono para indicar que está contraído
                roomNameText.setCompoundDrawablesWithIntrinsicBounds(
                    roomNameText.getCompoundDrawables()[0], // Mantener icono de habitación
                    null, 
                    itemView.getContext().getDrawable(R.drawable.ic_expand_more), 
                    null
                );
            } else {
                devicesRecyclerView.setVisibility(View.VISIBLE);
                // Cambiar icono para indicar que está expandido
                roomNameText.setCompoundDrawablesWithIntrinsicBounds(
                    roomNameText.getCompoundDrawables()[0], // Mantener icono de habitación
                    null, 
                    itemView.getContext().getDrawable(R.drawable.ic_expand_less), 
                    null
                );
            }
        }

        /**
         * Obtiene el icono apropiado según el tipo de habitación
         */
        private int getRoomIcon(String roomType) {
            switch (roomType.toUpperCase()) {
                case "LIVING_ROOM":
                    return R.drawable.ic_living_room;
                case "BEDROOM":
                    return R.drawable.ic_bedroom;
                case "KITCHEN":
                    return R.drawable.ic_kitchen;
                case "BATHROOM":
                    return R.drawable.ic_bathroom;
                case "DINING_ROOM":
                    return R.drawable.ic_dining_room;
                case "GARAGE":
                    return R.drawable.ic_garage;
                case "GARDEN":
                    return R.drawable.ic_garden;
                case "OFFICE":
                    return R.drawable.ic_office;
                default:
                    return R.drawable.ic_room_default;
            }
        }
    }

    /**
     * DiffUtil callback para optimizar actualizaciones de la lista
     */
    private static final DiffUtil.ItemCallback<DevicesViewModel.RoomWithDevices> DIFF_CALLBACK = 
            new DiffUtil.ItemCallback<DevicesViewModel.RoomWithDevices>() {
        
        @Override
        public boolean areItemsTheSame(@NonNull DevicesViewModel.RoomWithDevices oldItem, 
                                     @NonNull DevicesViewModel.RoomWithDevices newItem) {
            return oldItem.getRoom().getId().equals(newItem.getRoom().getId());
        }

        @Override
        public boolean areContentsTheSame(@NonNull DevicesViewModel.RoomWithDevices oldItem, 
                                        @NonNull DevicesViewModel.RoomWithDevices newItem) {
            // Comparar habitación
            if (!oldItem.getRoom().equals(newItem.getRoom())) {
                return false;
            }
            
            // Comparar lista de dispositivos
            if (oldItem.getDevices().size() != newItem.getDevices().size()) {
                return false;
            }
            
            for (int i = 0; i < oldItem.getDevices().size(); i++) {
                Device oldDevice = oldItem.getDevices().get(i);
                Device newDevice = newItem.getDevices().get(i);
                
                if (!oldDevice.getId().equals(newDevice.getId()) || 
                    oldDevice.isEnabled() != newDevice.isEnabled() ||
                    oldDevice.isConnected() != newDevice.isConnected() ||
                    Float.compare(oldDevice.getCurrentValue(), newDevice.getCurrentValue()) != 0) {
                    return false;
                }
            }
            
            return true;
        }
    };
}